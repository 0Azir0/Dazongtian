[gd_scene load_steps=28 format=3 uid="uid://cxfawgbwmaynq"]

[ext_resource type="Texture2D" uid="uid://dwri43vowcleg" path="res://source/AnimationSheet_Character.png" id="1_xhfnw"]

[sub_resource type="GDScript" id="GDScript_xhfnw"]
script/source = "extends CharacterBody2D

@export var gravity: float = 900.0
@export var speed: float = 100.0

@export var jump_height_min: float = 5.0
@export var jump_height_max: float = 300.0
@export var max_jump_charge_time: float = 1.5

@export var hold_jump_frame_index: int = 0

var anim: AnimatedSprite2D

enum State { GROUND, CHARGING, AIR }
var state: State = State.GROUND

var jump_charge: float = 0.0
var jump_direction: Vector2 = Vector2.UP
var in_air: bool = false

var _jump_speed_min: float = 0.0
var _jump_speed_max: float = 0.0
var _landed_played: bool = false

func _ready() -> void:
	anim = $AnimatedSprite2D
	_jump_speed_min = sqrt(2.0 * gravity * max(0.0, jump_height_min))
	_jump_speed_max = sqrt(2.0 * gravity * max(0.0, jump_height_max))
	
	if PlayerAttribute.saved_global_position_x != 0.0:
		global_position.x = PlayerAttribute.saved_global_position_x
		PlayerAttribute.saved_global_position_x = 0.0
	
	# 還原速度
	if PlayerAttribute.saved_velocity != Vector2.ZERO:
		velocity = PlayerAttribute.saved_velocity
		velocity.y = 1
		PlayerAttribute.saved_velocity = Vector2.ZERO  # 清除以免重複使用

func _anim_has(name: String) -> bool:
	return anim and anim.sprite_frames and anim.sprite_frames.has_animation(name)

func _physics_process(delta: float) -> void:
	# 重力處理
	if not is_on_floor():
		velocity.y += gravity * delta
		if state == State.GROUND:
			state = State.AIR
			in_air = true

	# 狀態邏輯
	match state:
		State.GROUND:
			_ground_process(delta)
		State.CHARGING:
			_charging_process(delta)
		State.AIR:
			_air_process(delta)

	# 移動並偵測碰撞
	move_and_slide()

	# 空中撞牆反彈
	if state == State.AIR:
		var collision = get_last_slide_collision()
		if collision and abs(collision.get_normal().x) > 0.7:
			if abs(velocity.x) < 10:
				velocity.x = 100 * collision.get_normal().x
			else:
				velocity.x = -velocity.x

func _ground_process(delta: float) -> void:
	var input_dir: int = Input.get_action_strength(\"right\") - Input.get_action_strength(\"left\")
	velocity.x = input_dir * speed

	if is_on_floor():
		velocity.y = 0.0

	if input_dir != 0:
		if _anim_has(\"walk\"):
			anim.play(\"walk\")
			anim.flip_h = input_dir < 0
	else:
		if _anim_has(\"idle\"):
			anim.play(\"idle\")
		elif anim:
			anim.stop()

	if is_on_floor() and Input.is_action_just_pressed(\"jump\"):
		state = State.CHARGING
		jump_charge = 0.0
		jump_direction = Vector2(0, -0.5)
		velocity = Vector2.ZERO
		_landed_played = false
		if _anim_has(\"jump\"):
			anim.play(\"jump\")
			anim.frame = hold_jump_frame_index
			anim.stop()

func _charging_process(delta: float) -> void:
	if Input.is_action_pressed(\"jump\"):
		jump_charge = min(jump_charge + delta, max_jump_charge_time)

		var left = Input.is_action_pressed(\"left\")
		var right = Input.is_action_pressed(\"right\")

		if left and right:
			jump_direction = Vector2(0, -0.35)
		elif left:
			jump_direction = Vector2(-0.35, -0.35)
		elif right:
			jump_direction = Vector2(0.35, -0.35)
		else:
			jump_direction = Vector2(0, -0.35)

		if _anim_has(\"jump\"):
			anim.frame = hold_jump_frame_index
			anim.stop()
	else:
		var t: float = clamp(jump_charge / max_jump_charge_time, 0.0, 0.35)
		var jump_speed: float = lerp(_jump_speed_min, _jump_speed_max, t)
		var dir: Vector2 = jump_direction.normalized()
		velocity.y = -jump_speed
		velocity.x = dir.x * jump_speed * 0.5

		state = State.AIR
		in_air = true
		jump_charge = 0.0

		if _anim_has(\"jump\"):
			anim.play(\"jump\")

func _air_process(delta: float) -> void:
	if velocity.y >= 0.0 and _anim_has(\"fall\"):
		anim.play(\"fall\")

	if is_on_floor() and velocity.y >= 0.0:
		state = State.GROUND
		in_air = false
		velocity.x = 0.0
		if _anim_has(\"fall\") and not _landed_played:
			anim.play(\"fall\")
			_landed_played = true

func save_position_1():
	PlayerAttribute.saved_velocity = velocity
	PlayerAttribute.saved_global_position_x = global_position.x
	PlayerAttribute.saved_global_position_y = global_position.y
func save_positon_2():
	PlayerAttribute.saved_velocity = velocity
	PlayerAttribute.saved_global_position_x = global_position.x
	PlayerAttribute.saved_global_position_y = -12


func _on_area_2d_body_entered(body: Node2D) -> void:
	if body.is_in_group(\"finish_line\"):
		call_deferred(save_position_1())
		var current_scene = get_tree().current_scene.scene_file_path
		var scene_name = current_scene.get_file().get_basename()
		print(scene_name)
		_go_to_next_scene(scene_name)
	pass # Replace with function body.
	
func _on_area_2d_2_body_entered(body: Node2D) -> void:
	if body.is_in_group(\"finish_line_back\"):
		call_deferred(save_position_2())	
		var current_scene = get_tree().current_scene.scene_file_path
		var scene_name = current_scene.get_file().get_basename()
		print(scene_name)
		_go_to_previous_scene(scene_name)
	pass # Replace with function body.
	
func _go_to_next_scene(scene_name: String):
	match scene_name:
		\"world_1\":
			get_tree().change_scene_to_file(\"res://scene/world_2.tscn\")
		\"world_2\":
			get_tree().change_scene_to_file(\"res://scene/world_3.tscn\")
		\"world_3\":
			get_tree().change_scene_to_file(\"res://scene/world_4.tscn\")
		_:
			print(\"沒有定義下一關:\", scene_name)

func _go_to_previous_scene(scene_name: String):
	match scene_name:
		\"world_2\":
			get_tree().change_scene_to_file(\"res://scene/world_1.tscn\")
		\"world_3\":
			get_tree().change_scene_to_file(\"res://scene/world_2.tscn\")
		\"world_4\":
			get_tree().change_scene_to_file(\"res://scene/world_3.tscn\")
		_:
			print(\"一定是出錯了對吧:\", scene_name)

"

[sub_resource type="AtlasTexture" id="AtlasTexture_xhfnw"]
atlas = ExtResource("1_xhfnw")
region = Rect2(0, 130, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_l6ohk"]
atlas = ExtResource("1_xhfnw")
region = Rect2(32, 130, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_oudfo"]
atlas = ExtResource("1_xhfnw")
region = Rect2(64, 130, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_d6rpx"]
atlas = ExtResource("1_xhfnw")
region = Rect2(96, 130, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_kpjcp"]
atlas = ExtResource("1_xhfnw")
region = Rect2(1, 3, 31, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_kne1u"]
atlas = ExtResource("1_xhfnw")
region = Rect2(32, 3, 31, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_r3kul"]
atlas = ExtResource("1_xhfnw")
region = Rect2(0, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_jatw7"]
atlas = ExtResource("1_xhfnw")
region = Rect2(32, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_rv870"]
atlas = ExtResource("1_xhfnw")
region = Rect2(64, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_efikj"]
atlas = ExtResource("1_xhfnw")
region = Rect2(96, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_itxgx"]
atlas = ExtResource("1_xhfnw")
region = Rect2(128, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_cgsek"]
atlas = ExtResource("1_xhfnw")
region = Rect2(160, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_0pi4m"]
atlas = ExtResource("1_xhfnw")
region = Rect2(192, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_sg6sq"]
atlas = ExtResource("1_xhfnw")
region = Rect2(224, 227, 32, 30)

[sub_resource type="AtlasTexture" id="AtlasTexture_e80uo"]
atlas = ExtResource("1_xhfnw")
region = Rect2(0, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_cxr5p"]
atlas = ExtResource("1_xhfnw")
region = Rect2(32, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_tdg3f"]
atlas = ExtResource("1_xhfnw")
region = Rect2(64, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_dtqjt"]
atlas = ExtResource("1_xhfnw")
region = Rect2(96, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_5ncpa"]
atlas = ExtResource("1_xhfnw")
region = Rect2(128, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_wi0c6"]
atlas = ExtResource("1_xhfnw")
region = Rect2(160, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_hp6x6"]
atlas = ExtResource("1_xhfnw")
region = Rect2(192, 99, 32, 31)

[sub_resource type="AtlasTexture" id="AtlasTexture_3tkgg"]
atlas = ExtResource("1_xhfnw")
region = Rect2(224, 99, 32, 31)

[sub_resource type="SpriteFrames" id="SpriteFrames_l6ohk"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_xhfnw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l6ohk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oudfo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d6rpx")
}],
"loop": true,
"name": &"fall",
"speed": 3.5
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_kpjcp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kne1u")
}],
"loop": true,
"name": &"jump",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_r3kul")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jatw7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rv870")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_efikj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_itxgx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cgsek")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0pi4m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_sg6sq")
}],
"loop": true,
"name": &"wait",
"speed": 4.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_e80uo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cxr5p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tdg3f")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dtqjt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5ncpa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wi0c6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hp6x6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3tkgg")
}],
"loop": true,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_oudfo"]
size = Vector2(20, 25.11111)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_23j7x"]
size = Vector2(12.1, 2.4)

[node name="Player" type="CharacterBody2D"]
scale = Vector2(0.6, 0.6)
script = SubResource("GDScript_xhfnw")
gravity = null
speed = null
jump_height_min = null
jump_height_max = null
max_jump_charge_time = null
hold_jump_frame_index = null

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.6, 0.6)
sprite_frames = SubResource("SpriteFrames_l6ohk")
animation = &"walk"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 0.8666665)
scale = Vector2(0.6, 0.6)
shape = SubResource("RectangleShape2D_oudfo")

[node name="Area2D2" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D2"]
position = Vector2(0, 8.333333)
shape = SubResource("RectangleShape2D_23j7x")

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2(0, -6.6666665)
shape = SubResource("RectangleShape2D_23j7x")

[connection signal="body_entered" from="Area2D2" to="." method="_on_area_2d_2_body_entered"]
[connection signal="body_entered" from="Area2D" to="." method="_on_area_2d_body_entered"]
